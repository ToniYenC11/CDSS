//app/receipt/[id]/page.tsx

"use client";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Download, RefreshCcw, Trash, Edit } from "lucide-react";
import { notFound, useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { toast } from "sonner";
import Image from "next/image";

interface Annotation {
  id: number;
  x: number;
  y: number;
  width: number;
  height: number;
  label: "positive" | "negative";
  relativeX: number;
  relativeY: number;
  relativeWidth: number;
  relativeHeight: number;
}

interface ReceiptData {
  CaseID: number;
  PatientID: string;
  Date: string;
  Diagnosis: string;
  Confidence: string;
  Image?: string;
  imageName?: string;
  annotations?: Annotation[];
}

const IMAGE_DISPLAY_SIZE = 480;

export default function ReceiptPage({ params }: { params: { id: string } }) {
  const [receipt, setReceipt] = useState<ReceiptData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  // Extract case ID from the params (remove CASE- prefix if present)
  const caseId = params.id.replace("CASE-", "").replace(/^0+/, "") || params.id;

  useEffect(() => {
    const fetchReceipt = async () => {
      try {
        const response = await fetch(`http://localhost:8000/case/${caseId}/`);

        if (response.status === 404) {
          notFound();
        }

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        setReceipt(data);
      } catch (err) {
        console.error("Error fetching receipt:", err);
        setError("Failed to load case details");
        toast.error("Failed to load case details");
      } finally {
        setLoading(false);
      }
    };

    fetchReceipt();
  }, [caseId]);

  const handleDownload = () => {
    if (!receipt) return;

    const receiptText = `
CLINICAL DECISION SUPPORT SYSTEM
DIAGNOSTIC RECEIPT

Case ID: CASE-${receipt.CaseID.toString().padStart(3, "0")}
Patient ID: ${receipt.PatientID}
Date: ${receipt.Date}

Diagnosis: ${receipt.Diagnosis}
Confidence: ${receipt.Confidence}

${
  receipt.annotations && receipt.annotations.length > 0
    ? `Annotations:
${receipt.annotations
  .map(
    (ann, idx) =>
      `${idx + 1}. ${ann.label} (x:${ann.x}, y:${ann.y}, w:${ann.width}, h:${
        ann.height
      })`
  )
  .join("\n")}`
    : "No annotations available"
}

Generated by cerv.AI - DOST-ASTI
    `.trim();

    const blob = new Blob([receiptText], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `receipt-CASE-${receipt.CaseID.toString().padStart(
      3,
      "0"
    )}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleDelete = async () => {
    if (!receipt) return;

    if (
      !confirm(
        "Are you sure you want to delete this case? This action cannot be undone."
      )
    ) {
      return;
    }

    try {
      setLoading(true);
      const response = await fetch(`http://localhost:8000/case/${caseId}/`, {
        method: "DELETE",
      });

      if (response.ok) {
        toast.success("Case deleted successfully");
        // Wait a moment for the toast to show, then redirect
        setTimeout(() => {
          window.location.href = "/database";
        }, 1000);
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to delete case");
      }
    } catch (err) {
      console.error("Error deleting case:", err);
      toast.error("Failed to delete case");
      setLoading(false);
    }
  };

  const handleUpdate = async () => {
    if (!receipt) return;

    try {
      // Store current case data in sessionStorage for the labeling page
      if (receipt.Image) {
        // Convert the image URL to a data URL for sessionStorage
        const response = await fetch(`http://localhost:8000${receipt.Image}`);
        const blob = await response.blob();
        const reader = new FileReader();

        reader.onload = () => {
          sessionStorage.setItem("currentImage", reader.result as string);
          sessionStorage.setItem(
            "currentImageName",
            receipt.imageName || "medical_image.jpg"
          );
          sessionStorage.setItem("caseId", receipt.CaseID.toString());
          sessionStorage.setItem("patientId", receipt.PatientID);

          // Store existing annotations if any
          if (receipt.annotations && receipt.annotations.length > 0) {
            sessionStorage.setItem(
              "existingAnnotations",
              JSON.stringify(receipt.annotations)
            );
          }

          // Navigate to labeling page
          router.push("/labeling");
        };

        reader.readAsDataURL(blob);
      } else {
        toast.error("No image available for this case");
      }
    } catch (err) {
      console.error("Error preparing update:", err);
      toast.error("Failed to prepare case for update");
    }
  };

  const handleRefresh = () => {
    setLoading(true);
    setError(null);
    window.location.reload();
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8 max-w-2xl">
        <div className="flex justify-center items-center min-h-[400px]">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
        </div>
      </div>
    );
  }

  if (error || !receipt) {
    return (
      <div className="container mx-auto px-4 py-8 max-w-2xl">
        <Card>
          <CardContent className="p-8 text-center">
            <p className="text-red-500 mb-4">{error || "Case not found"}</p>
            <Button onClick={handleRefresh}>
              <RefreshCcw className="mr-2 h-4 w-4" />
              Retry
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-2xl">
      <Card>
        <CardHeader className="text-center border-b">
          <CardTitle className="text-2xl">Diagnostic Receipt</CardTitle>
          <p className="text-muted-foreground">
            Clinical Decision Support System
          </p>
        </CardHeader>
        <CardContent className="p-8">
          <div className="space-y-6">
            {/* Header Row */}
            <div className="flex justify-between items-start">
              <div>
                <p className="text-sm text-muted-foreground">Case ID</p>
                <p className="font-semibold text-lg">
                  CASE-{receipt.CaseID.toString().padStart(3, "0")}
                </p>
              </div>
              <div className="text-right">
                <p className="text-sm text-muted-foreground">Date</p>
                <p className="font-semibold text-lg">{receipt.Date}</p>
              </div>
            </div>

            {/* Patient ID */}
            <div>
              <p className="text-sm text-muted-foreground">Patient ID</p>
              <p className="font-semibold text-lg">{receipt.PatientID}</p>
            </div>

            {/* Medical Image with Annotations */}
            {receipt.Image && (
              <div className="flex justify-center py-4">
                <div className="relative border rounded-lg overflow-hidden">
                  <div
                    className="relative"
                    style={{
                      width: `${IMAGE_DISPLAY_SIZE}px`,
                      height: `${IMAGE_DISPLAY_SIZE}px`,
                    }}
                  >
                    <Image
                      src={`http://localhost:8000${receipt.Image}`}
                      alt="Medical scan"
                      width={IMAGE_DISPLAY_SIZE}
                      height={IMAGE_DISPLAY_SIZE}
                      className="object-cover"
                      style={{
                        width: `${IMAGE_DISPLAY_SIZE}px`,
                        height: `${IMAGE_DISPLAY_SIZE}px`,
                      }}
                    />

                    {/* Render annotations as bounding boxes */}
                    {receipt.annotations &&
                      receipt.annotations.map((annotation, index) => {
                        // Scale annotations to the display size
                        const scaledX =
                          annotation.relativeX * IMAGE_DISPLAY_SIZE;
                        const scaledY =
                          annotation.relativeY * IMAGE_DISPLAY_SIZE;
                        const scaledWidth =
                          annotation.relativeWidth * IMAGE_DISPLAY_SIZE;
                        const scaledHeight =
                          annotation.relativeHeight * IMAGE_DISPLAY_SIZE;

                        return (
                          <div
                            key={index}
                            className={`absolute border-2 ${
                              annotation.label === "positive"
                                ? "border-green-500 bg-green-500/10"
                                : "border-red-500 bg-red-500/10"
                            }`}
                            style={{
                              left: scaledX,
                              top: scaledY,
                              width: scaledWidth,
                              height: scaledHeight,
                            }}
                          >
                            {/* Label */}
                            <div
                              className={`absolute -top-6 left-0 px-2 py-1 text-xs font-medium rounded ${
                                annotation.label === "positive"
                                  ? "bg-green-500 text-white"
                                  : "bg-red-500 text-white"
                              }`}
                            >
                              {annotation.label.charAt(0).toUpperCase() +
                                annotation.label.slice(1)}
                            </div>
                          </div>
                        );
                      })}
                  </div>
                </div>
              </div>
            )}

            {/* Diagnosis Section */}
            <div className="border-t pt-6">
              <div className="space-y-3">
                <div>
                  <p className="text-sm text-muted-foreground">Diagnosis</p>
                  <p className="font-semibold text-lg">{receipt.Diagnosis}</p>
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">
                    Confidence Level
                  </p>
                  <p className="font-semibold text-lg">{receipt.Confidence}</p>
                </div>
              </div>
            </div>

            {/* Bounding Box Coordinates */}
            {receipt.annotations && receipt.annotations.length > 0 && (
              <div className="border-t pt-6">
                <p className="text-sm text-muted-foreground mb-3">
                  Annotation Coordinates
                </p>
                <div className="space-y-2">
                  {receipt.annotations.map((annotation, index) => (
                    <div
                      key={index}
                      className="text-sm font-mono bg-gray-50 p-2 rounded"
                    >
                      <span
                        className={`inline-block w-16 text-xs font-semibold ${
                          annotation.label === "positive"
                            ? "text-green-600"
                            : "text-red-600"
                        }`}
                      >
                        {annotation.label}:
                      </span>
                      <span className="text-gray-700">
                        x:{annotation.x}, y:{annotation.y}, w:{annotation.width}
                        , h:{annotation.height}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Footer */}
            <div className="border-t pt-6 text-center text-sm text-muted-foreground">
              <p>Generated by cerv.AI - DOST-ASTI</p>
              <p>Clinical Decision Support System</p>

              <div className="mt-4 flex justify-center gap-4">
                <Button onClick={handleUpdate} size="lg" variant="outline">
                  <Edit className="mr-1.5 h-3 w-3" />
                  Update
                </Button>

                <Button
                  onClick={handleDelete}
                  size="lg"
                  variant="destructive"
                  disabled={loading}
                >
                  <Trash className="mr-1.5 h-3 w-3" />
                  {loading ? "Deleting..." : "Delete"}
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="mt-6 text-center">
        <Button onClick={handleDownload} size="lg">
          <Download className="mr-2 h-4 w-4" />
          Download Receipt
        </Button>
      </div>
    </div>
  );
}
